// UI Funktionalitetstest f√∂r SoccerPredict Pro
// Testar ber√§kningsknappen och laddningsindikator

import { calculateAdvancedXGPrediction } from '../utils/xgCalculations.js';
import { enhancedPoissonCalculator } from '../utils/improvedMath.js';
import { monteCarloSimulator } from '../utils/improvedMath.js';

// Simulera UI-interaktion
function simulateUIInteraction() {
  console.log('üñ±Ô∏è  UI FUNKTIONALITETSTEST');
  console.log('===========================');
  console.log('Simulerar anv√§ndarinteraktion med ber√§kningsknappen\n');
  
  // Testdata
  const testData = {
    homeXG: 1.5,
    awayXG: 1.2,
    homeAdvantage: 0.3,
    recentForm: 0.1
  };
  
  console.log('üìã Testparametrar:');
  console.log(`   Hemma xG: ${testData.homeXG}`);
  console.log(`   Borta xG: ${testData.awayXG}`);
  console.log(`   Hemmaf√∂rdelar: ${testData.homeAdvantage}`);
  console.log(`   Senaste form: ${testData.recentForm}\n`);
  
  return testData;
}

// Simulera laddningsindikator
function simulateLoadingIndicator(methodName, duration) {
  return new Promise((resolve) => {
    console.log(`‚è≥ ${methodName}: Ber√§kning p√•g√•r...`);
    
    // Simulera progressbar
    let progress = 0;
    const interval = setInterval(() => {
      progress += 20;
      const progressBar = '‚ñà'.repeat(progress / 10) + '‚ñë'.repeat((100 - progress) / 10);
      process.stdout.write(`\r   [${progressBar}] ${progress}%`);
      
      if (progress >= 100) {
        clearInterval(interval);
        console.log(''); // Ny rad
        resolve();
      }
    }, duration / 5);
  });
}

// Testa ber√§kningsknapp-funktionalitet
async function testCalculationButton() {
  console.log('üîò BER√ÑKNINGSKNAPP TEST');
  console.log('========================');
  
  const testData = simulateUIInteraction();
  const results = {};
  const errors = [];
  
  try {
    // Test 1: xG-ber√§kning med laddningsindikator
    console.log('\n1Ô∏è‚É£  Testar xG-ber√§kning...');
    await simulateLoadingIndicator('xG', 500);
    
    const startTime = performance.now();
    results.xg = calculateAdvancedXGPrediction({
      homeXG: testData.homeXG,
      awayXG: testData.awayXG,
      homeAdvantage: testData.homeAdvantage,
      recentForm: testData.recentForm
    });
    const xgTime = Math.round(performance.now() - startTime);
    
    if (results.xg && typeof results.xg === 'object') {
      console.log(`‚úÖ xG-ber√§kning slutf√∂rd (${xgTime}ms)`);
      console.log(`   Resultat: H${results.xg.homeWin}% D${results.xg.draw}% A${results.xg.awayWin}%`);
    } else {
      errors.push('xG-ber√§kning returnerade ogiltigt resultat');
    }
    
  } catch (error) {
    errors.push(`xG-ber√§kning misslyckades: ${error.message}`);
  }
  
  try {
    // Test 2: Poisson-ber√§kning med laddningsindikator
    console.log('\n2Ô∏è‚É£  Testar Poisson-ber√§kning...');
    await simulateLoadingIndicator('Poisson', 800);
    
    const startTime = performance.now();
    results.poisson = enhancedPoissonCalculator.calculate(
      testData.homeXG,
      testData.awayXG,
      testData.homeAdvantage
    );
    const poissonTime = Math.round(performance.now() - startTime);
    
    if (results.poisson && typeof results.poisson === 'object') {
      console.log(`‚úÖ Poisson-ber√§kning slutf√∂rd (${poissonTime}ms)`);
      console.log(`   Resultat: H${results.poisson.homeWinProbability}% D${results.poisson.drawProbability}% A${results.poisson.awayWinProbability}%`);
    } else {
      errors.push('Poisson-ber√§kning returnerade ogiltigt resultat');
    }
    
  } catch (error) {
    errors.push(`Poisson-ber√§kning misslyckades: ${error.message}`);
  }
  
  try {
    // Test 3: Monte Carlo-simulering med laddningsindikator
    console.log('\n3Ô∏è‚É£  Testar Monte Carlo-simulering...');
    await simulateLoadingIndicator('Monte Carlo', 1200);
    
    const startTime = performance.now();
    results.monteCarlo = monteCarloSimulator.simulate(
      testData.homeXG,
      testData.awayXG,
      testData.homeAdvantage,
      5000 // Optimalt antal simuleringar fr√•n tidigare test
    );
    const monteCarloTime = Math.round(performance.now() - startTime);
    
    if (results.monteCarlo && typeof results.monteCarlo === 'object') {
      console.log(`‚úÖ Monte Carlo-simulering slutf√∂rd (${monteCarloTime}ms)`);
      console.log(`   Resultat: H${results.monteCarlo.homeWinProbability}% D${results.monteCarlo.drawProbability}% A${results.monteCarlo.awayWinProbability}%`);
    } else {
      errors.push('Monte Carlo-simulering returnerade ogiltigt resultat');
    }
    
  } catch (error) {
    errors.push(`Monte Carlo-simulering misslyckades: ${error.message}`);
  }
  
  return { results, errors };
}

// Testa responsivitet och prestanda
function testResponsiveness() {
  console.log('\n‚ö° RESPONSIVITETSTEST');
  console.log('======================');
  
  const issues = [];
  
  // Simulera snabba klick p√• ber√§kningsknappen
  console.log('üñ±Ô∏è  Simulerar snabba klick p√• ber√§kningsknappen...');
  
  const testData = {
    homeXG: 2.0,
    awayXG: 1.0,
    homeAdvantage: 0.2
  };
  
  const startTime = performance.now();
  
  // K√∂r flera ber√§kningar snabbt efter varandra
  for (let i = 0; i < 5; i++) {
    try {
      const result = calculateAdvancedXGPrediction({
        homeXG: testData.homeXG + (i * 0.1),
        awayXG: testData.awayXG + (i * 0.1),
        homeAdvantage: testData.homeAdvantage,
        recentForm: 0
      });
      
      if (!result || typeof result !== 'object') {
        issues.push(`Snabbklick ${i + 1}: Ogiltigt resultat`);
      }
    } catch (error) {
      issues.push(`Snabbklick ${i + 1}: ${error.message}`);
    }
  }
  
  const totalTime = Math.round(performance.now() - startTime);
  
  if (totalTime > 100) {
    issues.push(`L√•ngsam responsivitet: ${totalTime}ms f√∂r 5 ber√§kningar`);
  } else {
    console.log(`‚úÖ Bra responsivitet: ${totalTime}ms f√∂r 5 ber√§kningar`);
  }
  
  return issues;
}

// Huvudtestfunktion
export async function runUIFunctionalityTest() {
  console.log('üéØ STARTAR UI FUNKTIONALITETSTEST\n');
  
  const allIssues = [];
  
  try {
    // Test ber√§kningsknapp och laddningsindikator
    const { results, errors } = await testCalculationButton();
    allIssues.push(...errors);
    
    // Test responsivitet
    const responsivenessIssues = testResponsiveness();
    allIssues.push(...responsivenessIssues);
    
    // Sammanfattning
    console.log('\nüìä TESTSAMMANFATTNING');
    console.log('=====================');
    
    if (allIssues.length === 0) {
      console.log('‚úÖ Alla UI-funktioner fungerar korrekt!');
      console.log('‚úÖ Ber√§kningsknappen svarar snabbt');
      console.log('‚úÖ Laddningsindikatorn simulerad framg√•ngsrikt');
      console.log('‚úÖ Inga responsivitetsproblem uppt√§ckta');
    } else {
      console.log(`‚ùå ${allIssues.length} problem uppt√§ckta:`);
      allIssues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue}`);
      });
    }
    
    console.log('\nüí° REKOMMENDATIONER:');
    console.log('- Implementera riktig laddningsindikator i React-komponenten');
    console.log('- L√§gg till debouncing f√∂r att f√∂rhindra spam-klick');
    console.log('- √ñverv√§g att visa ber√§kningstid f√∂r anv√§ndaren');
    console.log('- L√§gg till felhantering f√∂r misslyckade ber√§kningar');
    
  } catch (error) {
    console.error('‚ùå Kritiskt fel i UI-test:', error.message);
  }
}

// K√∂r test om filen k√∂rs direkt
if (import.meta.url === `file://${process.argv[1]}`) {
  runUIFunctionalityTest();
}